//Autogenerated
#include <TTree.h>
#define N_MAX 500
#define DEF_VAL_FLOAT -9999.0f
#define DEF_VAL_DOUBLE -9999.0d
#define DEF_VAL_INT -9999
#define FLOAT_EPS 0.0000001f
#define DOUBLE_EPS 0.0000001d
constexpr bool is_undef(int x) { return x==DEF_VAL_INT; };
constexpr bool is_undef(float x) { return fabs(x-DEF_VAL_FLOAT) < FLOAT_EPS; };
constexpr bool is_undef(double x) { return fabs(x-DEF_VAL_DOUBLE) < DOUBLE_EPS; };
#define SET_ZERO(x,n,y) for(int i=0;i<n;i++) {x[i]=y;}
class TTHTree {
public:
	TTHTree(TTree* _tree);
	TTree* tree;
	double debug__time1c;
	double debug__time1r;
	int event__id;
	int event__json;
	int event__lumi;
	int event__run;
	float gen_jet__eta[N_MAX];
	int gen_jet__id[N_MAX];
	float gen_jet__mass[N_MAX];
	float gen_jet__phi[N_MAX];
	float gen_jet__pt[N_MAX];
	float gen_lep__eta[N_MAX];
	int gen_lep__id[N_MAX];
	float gen_lep__mass[N_MAX];
	float gen_lep__phi[N_MAX];
	float gen_lep__pt[N_MAX];
	float gen_met__phi;
	float gen_met__pt;
	float jet__bd_csv[N_MAX];
	float jet__eta[N_MAX];
	int jet__id[N_MAX];
	float jet__mass[N_MAX];
	float jet__phi[N_MAX];
	float jet__pt[N_MAX];
	int lep__charge[N_MAX];
	float lep__dxy[N_MAX];
	float lep__dz[N_MAX];
	float lep__eta[N_MAX];
	int lep__id[N_MAX];
	int lep__is_loose[N_MAX];
	int lep__is_medium[N_MAX];
	int lep__is_tight[N_MAX];
	float lep__mass[N_MAX];
	float lep__mva[N_MAX];
	float lep__phi[N_MAX];
	float lep__pt[N_MAX];
	float lep__riso[N_MAX];
	float met__phi;
	float met__pt;
	float met__pt__en_down;
	float met__pt__en_up;
	int n__gen_jet;
	int n__gen_lep;
	int n__jet;
	int n__lep;
	int n__pv;
	int n__pvi;
	int pvi__bx[N_MAX];
	float pvi__n0[N_MAX];
	float pvi__ntrue[N_MAX];
	float weight__pu;
	float weight__pu__up;
	float weight__pu_down;
	float weight__trigger;
	float weight__trigger_down;
	float weight__trigger_up;
	void loop_initialize(void) {
		debug__time1c = DEF_VAL_DOUBLE;
		debug__time1r = DEF_VAL_DOUBLE;
		event__id = DEF_VAL_INT;
		event__json = DEF_VAL_INT;
		event__lumi = DEF_VAL_INT;
		event__run = DEF_VAL_INT;
		SET_ZERO(gen_jet__eta, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(gen_jet__id, N_MAX, DEF_VAL_INT);
		SET_ZERO(gen_jet__mass, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(gen_jet__phi, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(gen_jet__pt, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(gen_lep__eta, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(gen_lep__id, N_MAX, DEF_VAL_INT);
		SET_ZERO(gen_lep__mass, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(gen_lep__phi, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(gen_lep__pt, N_MAX, DEF_VAL_FLOAT);
		gen_met__phi = DEF_VAL_FLOAT;
		gen_met__pt = DEF_VAL_FLOAT;
		SET_ZERO(jet__bd_csv, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(jet__eta, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(jet__id, N_MAX, DEF_VAL_INT);
		SET_ZERO(jet__mass, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(jet__phi, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(jet__pt, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(lep__charge, N_MAX, DEF_VAL_INT);
		SET_ZERO(lep__dxy, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(lep__dz, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(lep__eta, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(lep__id, N_MAX, DEF_VAL_INT);
		SET_ZERO(lep__is_loose, N_MAX, DEF_VAL_INT);
		SET_ZERO(lep__is_medium, N_MAX, DEF_VAL_INT);
		SET_ZERO(lep__is_tight, N_MAX, DEF_VAL_INT);
		SET_ZERO(lep__mass, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(lep__mva, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(lep__phi, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(lep__pt, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(lep__riso, N_MAX, DEF_VAL_FLOAT);
		met__phi = DEF_VAL_FLOAT;
		met__pt = DEF_VAL_FLOAT;
		met__pt__en_down = DEF_VAL_FLOAT;
		met__pt__en_up = DEF_VAL_FLOAT;
		n__gen_jet = DEF_VAL_INT;
		n__gen_lep = DEF_VAL_INT;
		n__jet = DEF_VAL_INT;
		n__lep = DEF_VAL_INT;
		n__pv = DEF_VAL_INT;
		n__pvi = DEF_VAL_INT;
		SET_ZERO(pvi__bx, N_MAX, DEF_VAL_INT);
		SET_ZERO(pvi__n0, N_MAX, DEF_VAL_FLOAT);
		SET_ZERO(pvi__ntrue, N_MAX, DEF_VAL_FLOAT);
		weight__pu = DEF_VAL_FLOAT;
		weight__pu__up = DEF_VAL_FLOAT;
		weight__pu_down = DEF_VAL_FLOAT;
		weight__trigger = DEF_VAL_FLOAT;
		weight__trigger_down = DEF_VAL_FLOAT;
		weight__trigger_up = DEF_VAL_FLOAT;
	}
	void make_branches(void) {
		tree->Branch("event__id", &event__id, "event__id/I");
		tree->Branch("event__json", &event__json, "event__json/I");
		tree->Branch("event__lumi", &event__lumi, "event__lumi/I");
		tree->Branch("event__run", &event__run, "event__run/I");
		tree->Branch("n__gen_jet", &n__gen_jet, "n__gen_jet/I");
		tree->Branch("n__gen_lep", &n__gen_lep, "n__gen_lep/I");
		tree->Branch("n__jet", &n__jet, "n__jet/I");
		tree->Branch("n__lep", &n__lep, "n__lep/I");
		tree->Branch("n__pv", &n__pv, "n__pv/I");
		tree->Branch("n__pvi", &n__pvi, "n__pvi/I");
		tree->Branch("debug__time1c", &debug__time1c, "debug__time1c/D");
		tree->Branch("debug__time1r", &debug__time1r, "debug__time1r/D");
		tree->Branch("gen_jet__eta", gen_jet__eta, "gen_jet__eta[n__gen_jet]/F");
		tree->Branch("gen_jet__id", gen_jet__id, "gen_jet__id[n__gen_jet]/I");
		tree->Branch("gen_jet__mass", gen_jet__mass, "gen_jet__mass[n__gen_jet]/F");
		tree->Branch("gen_jet__phi", gen_jet__phi, "gen_jet__phi[n__gen_jet]/F");
		tree->Branch("gen_jet__pt", gen_jet__pt, "gen_jet__pt[n__gen_jet]/F");
		tree->Branch("gen_lep__eta", gen_lep__eta, "gen_lep__eta[n__gen_lep]/F");
		tree->Branch("gen_lep__id", gen_lep__id, "gen_lep__id[n__gen_lep]/I");
		tree->Branch("gen_lep__mass", gen_lep__mass, "gen_lep__mass[n__gen_lep]/F");
		tree->Branch("gen_lep__phi", gen_lep__phi, "gen_lep__phi[n__gen_lep]/F");
		tree->Branch("gen_lep__pt", gen_lep__pt, "gen_lep__pt[n__gen_lep]/F");
		tree->Branch("gen_met__phi", &gen_met__phi, "gen_met__phi/F");
		tree->Branch("gen_met__pt", &gen_met__pt, "gen_met__pt/F");
		tree->Branch("jet__bd_csv", jet__bd_csv, "jet__bd_csv[n__jet]/F");
		tree->Branch("jet__eta", jet__eta, "jet__eta[n__jet]/F");
		tree->Branch("jet__id", jet__id, "jet__id[n__jet]/I");
		tree->Branch("jet__mass", jet__mass, "jet__mass[n__jet]/F");
		tree->Branch("jet__phi", jet__phi, "jet__phi[n__jet]/F");
		tree->Branch("jet__pt", jet__pt, "jet__pt[n__jet]/F");
		tree->Branch("lep__charge", lep__charge, "lep__charge[n__lep]/I");
		tree->Branch("lep__dxy", lep__dxy, "lep__dxy[n__lep]/F");
		tree->Branch("lep__dz", lep__dz, "lep__dz[n__lep]/F");
		tree->Branch("lep__eta", lep__eta, "lep__eta[n__lep]/F");
		tree->Branch("lep__id", lep__id, "lep__id[n__lep]/I");
		tree->Branch("lep__is_loose", lep__is_loose, "lep__is_loose[n__lep]/I");
		tree->Branch("lep__is_medium", lep__is_medium, "lep__is_medium[n__lep]/I");
		tree->Branch("lep__is_tight", lep__is_tight, "lep__is_tight[n__lep]/I");
		tree->Branch("lep__mass", lep__mass, "lep__mass[n__lep]/F");
		tree->Branch("lep__mva", lep__mva, "lep__mva[n__lep]/F");
		tree->Branch("lep__phi", lep__phi, "lep__phi[n__lep]/F");
		tree->Branch("lep__pt", lep__pt, "lep__pt[n__lep]/F");
		tree->Branch("lep__riso", lep__riso, "lep__riso[n__lep]/F");
		tree->Branch("met__phi", &met__phi, "met__phi/F");
		tree->Branch("met__pt", &met__pt, "met__pt/F");
		tree->Branch("met__pt__en_down", &met__pt__en_down, "met__pt__en_down/F");
		tree->Branch("met__pt__en_up", &met__pt__en_up, "met__pt__en_up/F");
		tree->Branch("pvi__bx", pvi__bx, "pvi__bx[n__pvi]/I");
		tree->Branch("pvi__n0", pvi__n0, "pvi__n0[n__pvi]/F");
		tree->Branch("pvi__ntrue", pvi__ntrue, "pvi__ntrue[n__pvi]/F");
		tree->Branch("weight__pu", &weight__pu, "weight__pu/F");
		tree->Branch("weight__pu__up", &weight__pu__up, "weight__pu__up/F");
		tree->Branch("weight__pu_down", &weight__pu_down, "weight__pu_down/F");
		tree->Branch("weight__trigger", &weight__trigger, "weight__trigger/F");
		tree->Branch("weight__trigger_down", &weight__trigger_down, "weight__trigger_down/F");
		tree->Branch("weight__trigger_up", &weight__trigger_up, "weight__trigger_up/F");
	}
};
