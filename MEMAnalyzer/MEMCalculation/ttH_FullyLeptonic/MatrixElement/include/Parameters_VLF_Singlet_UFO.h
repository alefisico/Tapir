// 
// *  This file was automatically generated by MoMEMta-MaGMEE,
// *  A MadGraph Matrix Element Exporter plugin for MoMEMta.
// *
// *  It is subject to MoMEMta-MaGMEE's license and copyright:
// *
// *  Copyright (C) 2016  Universite catholique de Louvain (UCL), Belgium
// *
// *  This program is free software: you can redistribute it and/or modify
// *  it under the terms of the GNU General Public License as published by
// *  the Free Software Foundation, either version 3 of the License, or
// *  (at your option) any later version.
// *
// *  This program is distributed in the hope that it will be useful,
// *  but WITHOUT ANY WARRANTY; without even the implied warranty of
// *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// *  GNU General Public License for more details.
// *
// *  You should have received a copy of the GNU General Public License
// *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 

#pragma once

#include <complex> 
#include <memory> 

#include <momemta/MEParameters.h> 

namespace SLHA 
{
class Reader;}

  namespace ttH_FullyLeptonic_groupSubprocesses_VLF_Singlet_UFO 
  {

  class Parameters_VLF_Singlet_UFO: public momemta::MEParameters
  {

    public:

      Parameters_VLF_Singlet_UFO(const SLHA::Reader& card); 

      // *
      // * Cache parameters. This is implementation dependent
      // 
      virtual void cacheParameters(); 
      virtual void cacheCouplings(); 

      virtual void updateParameters(); 
      virtual void updateCouplings(); 

      // Define "zero"
      double zero, ZERO; 
      // Model parameters independent of aS
      double mdl_Wtp, mdl_WH, mdl_WW, mdl_WZ, mdl_WT, mdl_ymtau, mdl_ymm,
          mdl_yme, mdl_ymt, mdl_ymb, mdl_ymc, mdl_yms, mdl_ymup, mdl_ymdo, aS,
          mdl_Gf, aEWM1, mdl_MH, mdl_MZ, mdl_MTA, mdl_MMU, mdl_Me, mdl_MT,
          mdl_MB, mdl_MC, mdl_MS, mdl_MU, mdl_MD, mdl_MTT, mdl_yy, mdl_cabi,
          mdl_cos__cabi, mdl_sin__cabi, mdl_MZ__exp__2, mdl_MZ__exp__4,
          mdl_sqrt__2, mdl_MH__exp__2, mdl_MTT__exp__2, mdl_ymt__exp__2,
          mdl_yy__exp__2, mdl_aEW, mdl_MW, mdl_sqrt__aEW, mdl_ee,
          mdl_MW__exp__2, mdl_sw2, mdl_cw, mdl_sqrt__sw2, mdl_sw, mdl_g1,
          mdl_gw, mdl_vev, mdl_vev__exp__2, mdl_lam, mdl_yb, mdl_yc, mdl_ydo,
          mdl_ye, mdl_ym, mdl_ys, mdl_ytau, mdl_yup, mdl_vev__exp__4, mdl_muH,
          mdl_ee__exp__2, mdl_sw__exp__2, mdl_cw__exp__2;
      std::complex<double> mdl_CKM1x1, mdl_CKM1x2, mdl_CKM1x3, mdl_CKM2x1,
          mdl_CKM2x2, mdl_CKM2x3, mdl_CKM3x1, mdl_CKM3x2, mdl_CKM3x3,
          mdl_complexi, mdl_conjg__CKM1x1, mdl_conjg__CKM1x2,
          mdl_conjg__CKM1x3, mdl_conjg__CKM2x1, mdl_conjg__CKM2x2,
          mdl_conjg__CKM2x3, mdl_conjg__CKM3x1, mdl_conjg__CKM3x2,
          mdl_conjg__CKM3x3, mdl_yt, mdl_yt__exp__2, mdl_costl, mdl_costr,
          mdl_sintl, mdl_sintr, mdl_Mtp, mdl_costl__exp__2, mdl_sintl__exp__2;
      // Model parameters dependent on aS
      double mdl_sqrt__aS, G, mdl_G__exp__2; 
      // Model couplings independent of aS
      std::complex<double> GC_13, GC_22, GC_42, GC_43, GC_44, GC_47, GC_49,
          GC_52, GC_64;
      // Model couplings dependent on aS
      std::complex<double> GC_7, GC_6; 
  }; 

  }

