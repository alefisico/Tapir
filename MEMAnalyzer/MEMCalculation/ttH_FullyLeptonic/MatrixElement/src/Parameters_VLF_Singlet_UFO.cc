// 
// *  This file was automatically generated by MoMEMta-MaGMEE,
// *  A MadGraph Matrix Element Exporter plugin for MoMEMta.
// *
// *  It is subject to MoMEMta-MaGMEE's license and copyright:
// *
// *  Copyright (C) 2016  Universite catholique de Louvain (UCL), Belgium
// *
// *  This program is free software: you can redistribute it and/or modify
// *  it under the terms of the GNU General Public License as published by
// *  the Free Software Foundation, either version 3 of the License, or
// *  (at your option) any later version.
// *
// *  This program is distributed in the hope that it will be useful,
// *  but WITHOUT ANY WARRANTY; without even the implied warranty of
// *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// *  GNU General Public License for more details.
// *
// *  You should have received a copy of the GNU General Public License
// *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 

#include <Parameters_VLF_Singlet_UFO.h> 

#include <momemta/SLHAReader.h> 

namespace ttH_FullyLeptonic_groupSubprocesses_VLF_Singlet_UFO 
{

using namespace std; 

// Constructor
Parameters_VLF_Singlet_UFO::Parameters_VLF_Singlet_UFO(const SLHA::Reader&
  card)
{
// Prepare a vector for indices (for reading indexed entries)
vector<int> indices(2, 0); 

m_card_parameters["mdl_Wtp"] = card.get_block_entry("decay", 9000005,
    1.410900e+01);
m_card_parameters["mdl_WH"] = card.get_block_entry("decay", 25, 4.070000e-03); 
m_card_parameters["mdl_WW"] = card.get_block_entry("decay", 24, 2.085000e+00); 
m_card_parameters["mdl_WZ"] = card.get_block_entry("decay", 23, 2.495200e+00); 
m_card_parameters["mdl_WT"] = card.get_block_entry("decay", 6, 1.508336e+00); 
m_card_parameters["mdl_ymtau"] = card.get_block_entry("yukawa", 15,
    1.777000e+00);
m_card_parameters["mdl_ymm"] = card.get_block_entry("yukawa", 13,
    1.056600e-01);
m_card_parameters["mdl_yme"] = card.get_block_entry("yukawa", 11,
    5.110000e-04);
m_card_parameters["mdl_ymt"] = card.get_block_entry("yukawa", 6, 1.720000e+02); 
m_card_parameters["mdl_ymb"] = card.get_block_entry("yukawa", 5, 4.700000e+00); 
m_card_parameters["mdl_ymc"] = card.get_block_entry("yukawa", 4, 1.270000e+00); 
m_card_parameters["mdl_yms"] = card.get_block_entry("yukawa", 3, 1.010000e-01); 
m_card_parameters["mdl_ymup"] = card.get_block_entry("yukawa", 2,
    2.550000e-03);
m_card_parameters["mdl_ymdo"] = card.get_block_entry("yukawa", 1,
    5.040000e-03);
m_card_parameters["aS"] = card.get_block_entry("sminputs", 3, 1.184000e-01); 
m_card_parameters["mdl_Gf"] = card.get_block_entry("sminputs", 2,
    1.166370e-05);
m_card_parameters["aEWM1"] = card.get_block_entry("sminputs", 1, 1.279000e+02); 
m_card_parameters["mdl_MH"] = card.get_block_entry("mass", 25, 1.250000e+02); 
m_card_parameters["mdl_MZ"] = card.get_block_entry("mass", 23, 9.118760e+01); 
m_card_parameters["mdl_MTA"] = card.get_block_entry("mass", 15, 1.777000e+00); 
m_card_parameters["mdl_MMU"] = card.get_block_entry("mass", 13, 1.056600e-01); 
m_card_parameters["mdl_Me"] = card.get_block_entry("mass", 11, 5.110000e-04); 
m_card_parameters["mdl_MT"] = card.get_block_entry("mass", 6, 1.720000e+02); 
m_card_parameters["mdl_MB"] = card.get_block_entry("mass", 5, 4.700000e+00); 
m_card_parameters["mdl_MC"] = card.get_block_entry("mass", 4, 1.270000e+00); 
m_card_parameters["mdl_MS"] = card.get_block_entry("mass", 3, 1.010000e-01); 
m_card_parameters["mdl_MU"] = card.get_block_entry("mass", 2, 2.550000e-03); 
m_card_parameters["mdl_MD"] = card.get_block_entry("mass", 1, 5.040000e-03); 
m_card_parameters["mdl_MTT"] = card.get_block_entry("frblock", 2,
    1.000000e+03);
m_card_parameters["mdl_yy"] = card.get_block_entry("frblock", 1, 1.000000e+00); 
m_card_parameters["mdl_cabi"] = card.get_block_entry("ckmblock", 1,
    2.277360e-01);

this->cacheParameters(); 
this->cacheCouplings(); 
}

void Parameters_VLF_Singlet_UFO::cacheParameters()
{
// Define "zero"
zero = 0; 
ZERO = 0; 
mdl_Wtp = m_card_parameters["mdl_Wtp"]; 
mdl_WH = m_card_parameters["mdl_WH"]; 
mdl_WW = m_card_parameters["mdl_WW"]; 
mdl_WZ = m_card_parameters["mdl_WZ"]; 
mdl_WT = m_card_parameters["mdl_WT"]; 
mdl_ymtau = m_card_parameters["mdl_ymtau"]; 
mdl_ymm = m_card_parameters["mdl_ymm"]; 
mdl_yme = m_card_parameters["mdl_yme"]; 
mdl_ymt = m_card_parameters["mdl_ymt"]; 
mdl_ymb = m_card_parameters["mdl_ymb"]; 
mdl_ymc = m_card_parameters["mdl_ymc"]; 
mdl_yms = m_card_parameters["mdl_yms"]; 
mdl_ymup = m_card_parameters["mdl_ymup"]; 
mdl_ymdo = m_card_parameters["mdl_ymdo"]; 
aS = m_card_parameters["aS"]; 
mdl_Gf = m_card_parameters["mdl_Gf"]; 
aEWM1 = m_card_parameters["aEWM1"]; 
mdl_MH = m_card_parameters["mdl_MH"]; 
mdl_MZ = m_card_parameters["mdl_MZ"]; 
mdl_MTA = m_card_parameters["mdl_MTA"]; 
mdl_MMU = m_card_parameters["mdl_MMU"]; 
mdl_Me = m_card_parameters["mdl_Me"]; 
mdl_MT = m_card_parameters["mdl_MT"]; 
mdl_MB = m_card_parameters["mdl_MB"]; 
mdl_MC = m_card_parameters["mdl_MC"]; 
mdl_MS = m_card_parameters["mdl_MS"]; 
mdl_MU = m_card_parameters["mdl_MU"]; 
mdl_MD = m_card_parameters["mdl_MD"]; 
mdl_MTT = m_card_parameters["mdl_MTT"]; 
mdl_yy = m_card_parameters["mdl_yy"]; 
mdl_cabi = m_card_parameters["mdl_cabi"]; mdl_cos__cabi = cos(mdl_cabi); 
mdl_CKM1x1 = mdl_cos__cabi; 
mdl_sin__cabi = sin(mdl_cabi); 
mdl_CKM1x2 = mdl_sin__cabi; 
mdl_CKM1x3 = 0.; 
mdl_CKM2x1 = -mdl_sin__cabi; 
mdl_CKM2x2 = mdl_cos__cabi; 
mdl_CKM2x3 = 0.; 
mdl_CKM3x1 = 0.; 
mdl_CKM3x2 = 0.; 
mdl_CKM3x3 = 1.; 
mdl_MZ__exp__2 = ((mdl_MZ) * (mdl_MZ)); 
mdl_MZ__exp__4 = ((mdl_MZ) * (mdl_MZ) * (mdl_MZ) * (mdl_MZ)); 
mdl_sqrt__2 = sqrt(2.); 
mdl_MH__exp__2 = ((mdl_MH) * (mdl_MH)); 
mdl_MTT__exp__2 = ((mdl_MTT) * (mdl_MTT)); 
mdl_ymt__exp__2 = ((mdl_ymt) * (mdl_ymt)); 
mdl_yy__exp__2 = ((mdl_yy) * (mdl_yy)); 
mdl_complexi = std::complex<double> (0., 1.); 
mdl_conjg__CKM1x1 = conj(mdl_CKM1x1); 
mdl_conjg__CKM1x2 = conj(mdl_CKM1x2); 
mdl_conjg__CKM1x3 = conj(mdl_CKM1x3); 
mdl_conjg__CKM2x1 = conj(mdl_CKM2x1); 
mdl_conjg__CKM2x2 = conj(mdl_CKM2x2); 
mdl_conjg__CKM2x3 = conj(mdl_CKM2x3); 
mdl_conjg__CKM3x1 = conj(mdl_CKM3x1); 
mdl_conjg__CKM3x2 = conj(mdl_CKM3x2); 
mdl_conjg__CKM3x3 = conj(mdl_CKM3x3); 
mdl_aEW = 1./aEWM1; 
mdl_MW = sqrt(mdl_MZ__exp__2/2. + sqrt(mdl_MZ__exp__4/4. - (mdl_aEW * M_PI *
    mdl_MZ__exp__2)/(mdl_Gf * mdl_sqrt__2)));
mdl_sqrt__aEW = sqrt(mdl_aEW); 
mdl_ee = 2. * mdl_sqrt__aEW * sqrt(M_PI); 
mdl_MW__exp__2 = ((mdl_MW) * (mdl_MW)); 
mdl_sw2 = 1. - mdl_MW__exp__2/mdl_MZ__exp__2; 
mdl_cw = sqrt(1. - mdl_sw2); 
mdl_sqrt__sw2 = sqrt(mdl_sw2); 
mdl_sw = mdl_sqrt__sw2; 
mdl_g1 = mdl_ee/mdl_cw; 
mdl_gw = mdl_ee/mdl_sw; 
mdl_vev = (2. * mdl_MW * mdl_sw)/mdl_ee; 
mdl_vev__exp__2 = ((mdl_vev) * (mdl_vev)); 
mdl_lam = mdl_MH__exp__2/(2. * mdl_vev__exp__2); 
mdl_yb = (mdl_ymb * mdl_sqrt__2)/mdl_vev; 
mdl_yc = (mdl_ymc * mdl_sqrt__2)/mdl_vev; 
mdl_ydo = (mdl_ymdo * mdl_sqrt__2)/mdl_vev; 
mdl_ye = (mdl_yme * mdl_sqrt__2)/mdl_vev; 
mdl_ym = (mdl_ymm * mdl_sqrt__2)/mdl_vev; 
mdl_ys = (mdl_yms * mdl_sqrt__2)/mdl_vev; 
mdl_yt = (mdl_ymt * sqrt(-2. * mdl_MTT__exp__2 + 2. * mdl_ymt__exp__2 -
    mdl_vev__exp__2 * mdl_yy__exp__2))/(mdl_vev * sqrt(-mdl_MTT__exp__2 +
    mdl_ymt__exp__2));
mdl_ytau = (mdl_ymtau * mdl_sqrt__2)/mdl_vev; 
mdl_yup = (mdl_ymup * mdl_sqrt__2)/mdl_vev; 
mdl_yt__exp__2 = ((mdl_yt) * (mdl_yt)); 
mdl_costl = 1./sqrt(1. + ((-2. * mdl_MTT__exp__2 + mdl_vev__exp__2 *
    (mdl_yt__exp__2 + mdl_yy__exp__2) + sqrt(-8. * mdl_MTT__exp__2 *
    mdl_vev__exp__2 * mdl_yt__exp__2 + ((2. * mdl_MTT__exp__2 + mdl_vev__exp__2
    * (mdl_yt__exp__2 + mdl_yy__exp__2)) * (2. * mdl_MTT__exp__2 +
    mdl_vev__exp__2 * (mdl_yt__exp__2 + mdl_yy__exp__2))))) * (-2. *
    mdl_MTT__exp__2 + mdl_vev__exp__2 * (mdl_yt__exp__2 + mdl_yy__exp__2) +
    sqrt(-8. * mdl_MTT__exp__2 * mdl_vev__exp__2 * mdl_yt__exp__2 + ((2. *
    mdl_MTT__exp__2 + mdl_vev__exp__2 * (mdl_yt__exp__2 + mdl_yy__exp__2)) *
    (2. * mdl_MTT__exp__2 + mdl_vev__exp__2 * (mdl_yt__exp__2 +
    mdl_yy__exp__2))))))/(8. * mdl_MTT__exp__2 * mdl_vev__exp__2 *
    mdl_yy__exp__2));
mdl_vev__exp__4 = ((mdl_vev) * (mdl_vev) * (mdl_vev) * (mdl_vev)); 
mdl_costr = 1./sqrt(1. + ((-2. * mdl_MTT__exp__2 + mdl_vev__exp__2 *
    mdl_yt__exp__2 - mdl_vev__exp__2 * mdl_yy__exp__2 + sqrt(-8. *
    mdl_MTT__exp__2 * mdl_vev__exp__2 * mdl_yt__exp__2 + ((2. * mdl_MTT__exp__2
    + mdl_vev__exp__2 * (mdl_yt__exp__2 + mdl_yy__exp__2)) * (2. *
    mdl_MTT__exp__2 + mdl_vev__exp__2 * (mdl_yt__exp__2 + mdl_yy__exp__2))))) *
    (-2. * mdl_MTT__exp__2 + mdl_vev__exp__2 * mdl_yt__exp__2 - mdl_vev__exp__2
    * mdl_yy__exp__2 + sqrt(-8. * mdl_MTT__exp__2 * mdl_vev__exp__2 *
    mdl_yt__exp__2 + ((2. * mdl_MTT__exp__2 + mdl_vev__exp__2 * (mdl_yt__exp__2
    + mdl_yy__exp__2)) * (2. * mdl_MTT__exp__2 + mdl_vev__exp__2 *
    (mdl_yt__exp__2 + mdl_yy__exp__2))))))/(4. * mdl_vev__exp__4 *
    mdl_yt__exp__2 * mdl_yy__exp__2));
mdl_muH = sqrt(mdl_lam * mdl_vev__exp__2); 
mdl_sintl = 1./sqrt(1. + ((2. * mdl_MTT__exp__2 - mdl_vev__exp__2 *
    (mdl_yt__exp__2 + mdl_yy__exp__2) + sqrt(-8. * mdl_MTT__exp__2 *
    mdl_vev__exp__2 * mdl_yt__exp__2 + ((2. * mdl_MTT__exp__2 + mdl_vev__exp__2
    * (mdl_yt__exp__2 + mdl_yy__exp__2)) * (2. * mdl_MTT__exp__2 +
    mdl_vev__exp__2 * (mdl_yt__exp__2 + mdl_yy__exp__2))))) * (2. *
    mdl_MTT__exp__2 - mdl_vev__exp__2 * (mdl_yt__exp__2 + mdl_yy__exp__2) +
    sqrt(-8. * mdl_MTT__exp__2 * mdl_vev__exp__2 * mdl_yt__exp__2 + ((2. *
    mdl_MTT__exp__2 + mdl_vev__exp__2 * (mdl_yt__exp__2 + mdl_yy__exp__2)) *
    (2. * mdl_MTT__exp__2 + mdl_vev__exp__2 * (mdl_yt__exp__2 +
    mdl_yy__exp__2))))))/(8. * mdl_MTT__exp__2 * mdl_vev__exp__2 *
    mdl_yy__exp__2));
mdl_sintr = 1./sqrt(1. + ((2. * mdl_MTT__exp__2 + mdl_vev__exp__2 * (-mdl_yt +
    mdl_yy) * (mdl_yt + mdl_yy) + sqrt(-8. * mdl_MTT__exp__2 * mdl_vev__exp__2
    * mdl_yt__exp__2 + ((2. * mdl_MTT__exp__2 + mdl_vev__exp__2 *
    (mdl_yt__exp__2 + mdl_yy__exp__2)) * (2. * mdl_MTT__exp__2 +
    mdl_vev__exp__2 * (mdl_yt__exp__2 + mdl_yy__exp__2))))) * (2. *
    mdl_MTT__exp__2 + mdl_vev__exp__2 * (-mdl_yt + mdl_yy) * (mdl_yt + mdl_yy)
    + sqrt(-8. * mdl_MTT__exp__2 * mdl_vev__exp__2 * mdl_yt__exp__2 + ((2. *
    mdl_MTT__exp__2 + mdl_vev__exp__2 * (mdl_yt__exp__2 + mdl_yy__exp__2)) *
    (2. * mdl_MTT__exp__2 + mdl_vev__exp__2 * (mdl_yt__exp__2 +
    mdl_yy__exp__2))))))/(4. * mdl_vev__exp__4 * mdl_yt__exp__2 *
    mdl_yy__exp__2));
mdl_Mtp = mdl_costl * mdl_costr * mdl_MTT + (mdl_sintl * mdl_vev * (mdl_sintr *
    mdl_yt + mdl_costr * mdl_yy))/mdl_sqrt__2;
mdl_ee__exp__2 = ((mdl_ee) * (mdl_ee)); 
mdl_sw__exp__2 = ((mdl_sw) * (mdl_sw)); 
mdl_cw__exp__2 = ((mdl_cw) * (mdl_cw)); 
mdl_costl__exp__2 = ((mdl_costl) * (mdl_costl)); 
mdl_sintl__exp__2 = ((mdl_sintl) * (mdl_sintl)); 
}

void Parameters_VLF_Singlet_UFO::cacheCouplings()
{
GC_13 = (mdl_ee * mdl_complexi)/(mdl_sw * mdl_sqrt__2); 
GC_22 = (mdl_CKM3x3 * mdl_costl * mdl_ee * mdl_complexi)/(mdl_sw *
    mdl_sqrt__2);
GC_42 = -((mdl_complexi * mdl_yb)/mdl_sqrt__2); 
GC_43 = -((mdl_complexi * mdl_yc)/mdl_sqrt__2); 
GC_44 = -((mdl_complexi * mdl_ydo)/mdl_sqrt__2); 
GC_47 = -((mdl_complexi * mdl_ys)/mdl_sqrt__2); 
GC_49 = -((mdl_complexi * mdl_yup)/mdl_sqrt__2); 
GC_52 = -((mdl_costl * mdl_costr * mdl_complexi * mdl_yt)/mdl_sqrt__2) +
    (mdl_costl * mdl_complexi * mdl_sintr * mdl_yy)/mdl_sqrt__2;
GC_64 = (mdl_costl * mdl_ee * mdl_complexi * mdl_conjg__CKM3x3)/(mdl_sw *
    mdl_sqrt__2);
}

void Parameters_VLF_Singlet_UFO::updateParameters()
{
mdl_sqrt__aS = sqrt(aS); 
G = 2. * mdl_sqrt__aS * sqrt(M_PI); 
mdl_G__exp__2 = ((G) * (G)); 
}

void Parameters_VLF_Singlet_UFO::updateCouplings()
{
GC_7 = mdl_complexi * G; 
GC_6 = -G; 
}

}

